/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package source.debezium;

import io.debezium.engine.ChangeEvent;
import io.debezium.engine.DebeziumEngine;
import io.debezium.engine.format.Json;
import io.debezium.engine.spi.OffsetCommitPolicy;
import io.hstream.HRecord;
import io.hstream.io.SourceTaskContext;
import java.util.Properties;
import io.hstream.io.SourceTask;

class DebeziumSourceTask implements SourceTask {
    DebeziumEngine<ChangeEvent<String, String>> engine;
    SourceTaskContext ctx;

    @Override
    public void init(HRecord cfg, SourceTaskContext ctx) {
        try {
            System.out.println("cfg:" + cfg.toJsonString());
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        this.ctx = ctx;
        var propsJson = cfg.getHRecord("properties");
        var props = new Properties();
        props.setProperty("name", "engine");
        props.setProperty("offset.storage", "source.debezium.OffsetBackingStore");
        OffsetBackingStore.setKvStore(ctx.getKvStore());
        props.setProperty("offset.flush.interval.ms", "10000");

        // schema
        props.setProperty("key.converter", "org.apache.kafka.connect.json.JsonConverter");
        props.setProperty("key.converter.schemas.enable", "false");
        props.setProperty("value.converter", "org.apache.kafka.connect.json.JsonConverter");
        props.setProperty("value.converter.schemas.enable", "false");

        var source = cfg.getString("source");
        switch (source) {
            case "mysql":
                props.setProperty("connector.class", "io.debezium.connector.mysql.MySqlConnector");
                props.setProperty("database.port", "3306");
                break;
            case "postgres":
                props.setProperty("connector.class", "io.debezium.connector.postgresql.PostgresConnector");
                props.setProperty("database.port", "5432");
                break;
            case "sqlserver":
                props.setProperty("connector.class", "io.debezium.connector.sqlserver.SqlServerConnector");
                props.setProperty("database.port", "1433");
                break;
            default:
                throw new RuntimeException("unknown source:" + source);
        }

        props.setProperty("database.server.id", "85744");
        props.setProperty("database.server.name", "hstream-source-connector");
        props.setProperty("database.history",
                "io.debezium.relational.history.FileDatabaseHistory");
        props.setProperty("database.history.file.filename", cfg.getString("dbHistoryPath"));

        for (var key : propsJson.getKeySet()) {
            props.setProperty(key, propsJson.getString(key));
        }

        // Create the engine with this configuration ...
        engine = DebeziumEngine.create(Json.class)
                .using(props)
                .using(OffsetCommitPolicy.always())
                .notifying(new RecordConsumer(ctx))
                .build();
    }

    @Override
    public void run() {
        engine.run();
    }

    @Override
    public void stop() throws Exception {
        engine.close();
    }
}